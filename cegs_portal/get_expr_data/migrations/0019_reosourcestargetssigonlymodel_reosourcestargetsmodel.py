# Generated by Django 4.2.11 on 2024-04-22 14:19

import cegs_portal.search.models.validators
import django.contrib.postgres.fields
import django.contrib.postgres.fields.ranges
import django.contrib.postgres.indexes
from django.db import connection, migrations, models
import django.db.models.expressions

REO_SOURCES_TARGETS = """CREATE MATERIALIZED VIEW reo_sources_targets AS
                SELECT sr.id AS reo_id,
                    sr.archived as archived,
                    sr.public as public,
                    sr.accession_id AS reo_accession,
                    sr.experiment_accession_id AS reo_experiment,
                    sr.analysis_accession_id AS reo_analysis,
                    sr.facet_num_values AS reo_facets,
                    sds.id AS source_id,
                    sds.accession_id AS source_accession,
                    sds.chrom_name AS source_chrom,
                    sds.location AS source_loc,
                    sdt.id AS target_id,
                    sdt.accession_id AS target_accession,
                    sdt.chrom_name AS target_chrom,
                    sdt.location AS target_loc,
                    sdt.name AS target_gene_symbol,
                    sdt.ensembl_id AS target_ensembl_id,
                    sedfi.ref_genome AS ref_genome,
                    array_remove(ARRAY_AGG(DISTINCT(srfv.facetvalue_id)) || ARRAY_AGG(DISTINCT(sdsfv.facetvalue_id)) || ARRAY_AGG(DISTINCT(sdtfv.facetvalue_id)), NULL) AS cat_facets
                FROM search_regulatoryeffectobservation AS sr
                LEFT JOIN search_regulatoryeffectobservation_facet_values as srfv on sr.id = srfv.regulatoryeffectobservation_id
                LEFT JOIN search_regulatoryeffectobservation_sources AS srs ON sr.id = srs.regulatoryeffectobservation_id
                LEFT JOIN search_regulatoryeffectobservation_targets AS srt ON sr.id = srt.regulatoryeffectobservation_id
                LEFT JOIN search_dnafeature AS sds ON sds.id = srs.dnafeature_id
                LEFT JOIN search_dnafeature_facet_values as sdsfv on sds.id = sdsfv.dnafeature_id
                LEFT JOIN search_dnafeature AS sdt ON sdt.id = srt.dnafeature_id
                LEFT JOIN search_dnafeature_facet_values as sdtfv on sdt.id = sdtfv.dnafeature_id
                LEFT JOIN search_analysis AS sa ON sr.analysis_accession_id = sa.accession_id
                LEFT JOIN search_file AS sf ON sa.id = sf.analysis_id
                LEFT JOIN search_experimentdatafileinfo AS sedfi ON sf.data_file_info_id = sedfi.id
                GROUP BY sr.id, sds.id, sdt.id, sedfi.ref_genome
                """

REO_SOURCES_TARGETS_SIG_ONLY = """CREATE MATERIALIZED VIEW reo_sources_targets_sig_only AS
                SELECT sr.id AS reo_id,
                    sr.archived as archived,
                    sr.public as public,
                    sr.accession_id AS reo_accession,
                    sr.experiment_accession_id AS reo_experiment,
                    sr.analysis_accession_id AS reo_analysis,
                    sr.facet_num_values AS reo_facets,
                    sds.id AS source_id,
                    sds.accession_id AS source_accession,
                    sds.chrom_name AS source_chrom,
                    sds.location AS source_loc,
                    sdt.id AS target_id,
                    sdt.accession_id AS target_accession,
                    sdt.chrom_name AS target_chrom,
                    sdt.location AS target_loc,
                    sdt.name AS target_gene_symbol,
                    sdt.ensembl_id AS target_ensembl_id,
                    sedfi.ref_genome AS ref_genome,
                    array_remove(ARRAY_AGG(DISTINCT(srfv.facetvalue_id)) || ARRAY_AGG(DISTINCT(sdsfv.facetvalue_id)) || ARRAY_AGG(DISTINCT(sdtfv.facetvalue_id)), NULL) AS cat_facets
                FROM search_regulatoryeffectobservation AS sr
                LEFT JOIN search_regulatoryeffectobservation_facet_values as srfv on sr.id = srfv.regulatoryeffectobservation_id
                LEFT JOIN search_regulatoryeffectobservation_sources AS srs ON sr.id = srs.regulatoryeffectobservation_id
                LEFT JOIN search_regulatoryeffectobservation_targets AS srt ON sr.id = srt.regulatoryeffectobservation_id
                LEFT JOIN search_dnafeature AS sds ON sds.id = srs.dnafeature_id
                LEFT JOIN search_dnafeature_facet_values as sdsfv on sds.id = sdsfv.dnafeature_id
                LEFT JOIN search_dnafeature AS sdt ON sdt.id = srt.dnafeature_id
                LEFT JOIN search_dnafeature_facet_values as sdtfv on sdt.id = sdtfv.dnafeature_id
                LEFT JOIN search_analysis AS sa ON sr.analysis_accession_id = sa.accession_id
                LEFT JOIN search_file AS sf ON sa.id = sf.analysis_id
                LEFT JOIN search_experimentdatafileinfo AS sedfi ON sf.data_file_info_id = sedfi.id
                WHERE srfv.facetvalue_id != (SELECT id FROM search_facetvalue where value = 'Non-significant')
                GROUP BY sr.id, sds.id, sdt.id, sedfi.ref_genome
                """


def load_analyses(apps, schema_editor):
    Analysis = apps.get_model("search", "Analysis")
    with connection.cursor() as cursor:
        for analysis in Analysis.objects.all():
            cursor.execute(
                """INSERT INTO get_expr_data_reo_sources_targets
                    (reo_id, archived, public, reo_accession, reo_experiment, reo_analysis, reo_facets,
                    source_id, source_accession, source_chrom, source_loc,
                    target_id, target_accession, target_chrom, target_loc,
                    target_gene_symbol, target_ensembl_id, ref_genome, cat_facets) SELECT
                    sr.id AS reo_id,
                    sr.archived as archived,
                    sr.public as public,
                    sr.accession_id AS reo_accession,
                    sr.experiment_accession_id AS reo_experiment,
                    sr.analysis_accession_id AS reo_analysis,
                    sr.facet_num_values AS reo_facets,
                    sds.id AS source_id,
                    sds.accession_id AS source_accession,
                    sds.chrom_name AS source_chrom,
                    sds.location AS source_loc,
                    sdt.id AS target_id,
                    sdt.accession_id AS target_accession,
                    sdt.chrom_name AS target_chrom,
                    sdt.location AS target_loc,
                    sdt.name AS target_gene_symbol,
                    sdt.ensembl_id AS target_ensembl_id,
                    sedfi.ref_genome AS ref_genome,
                    array_remove(ARRAY_AGG(DISTINCT(srfv.facetvalue_id)) || ARRAY_AGG(DISTINCT(sdsfv.facetvalue_id)) || ARRAY_AGG(DISTINCT(sdtfv.facetvalue_id)), NULL) AS cat_facets
                FROM search_regulatoryeffectobservation AS sr
                LEFT JOIN search_regulatoryeffectobservation_facet_values as srfv on sr.id = srfv.regulatoryeffectobservation_id
                LEFT JOIN search_regulatoryeffectobservation_sources AS srs ON sr.id = srs.regulatoryeffectobservation_id
                LEFT JOIN search_regulatoryeffectobservation_targets AS srt ON sr.id = srt.regulatoryeffectobservation_id
                LEFT JOIN search_dnafeature AS sds ON sds.id = srs.dnafeature_id
                LEFT JOIN search_dnafeature_facet_values as sdsfv on sds.id = sdsfv.dnafeature_id
                LEFT JOIN search_dnafeature AS sdt ON sdt.id = srt.dnafeature_id
                LEFT JOIN search_dnafeature_facet_values as sdtfv on sdt.id = sdtfv.dnafeature_id
                LEFT JOIN search_analysis AS sa ON sr.analysis_accession_id = sa.accession_id
                LEFT JOIN search_file AS sf ON sa.id = sf.analysis_id
                LEFT JOIN search_experimentdatafileinfo AS sedfi ON sf.data_file_info_id = sedfi.id
                WHERE sr.analysis_accession_id = %s
                GROUP BY sr.id, sds.id, sdt.id, sedfi.ref_genome""",
                [analysis.accession_id],
            )
            cursor.execute(
                """INSERT INTO get_expr_data_reo_sources_targets_sig_only
                    (reo_id, archived, public, reo_accession, reo_experiment, reo_analysis, reo_facets,
                    source_id, source_accession, source_chrom, source_loc,
                    target_id, target_accession, target_chrom, target_loc,
                    target_gene_symbol, target_ensembl_id, ref_genome, cat_facets) SELECT
                    sr.id AS reo_id,
                    sr.archived as archived,
                    sr.public as public,
                    sr.accession_id AS reo_accession,
                    sr.experiment_accession_id AS reo_experiment,
                    sr.analysis_accession_id AS reo_analysis,
                    sr.facet_num_values AS reo_facets,
                    sds.id AS source_id,
                    sds.accession_id AS source_accession,
                    sds.chrom_name AS source_chrom,
                    sds.location AS source_loc,
                    sdt.id AS target_id,
                    sdt.accession_id AS target_accession,
                    sdt.chrom_name AS target_chrom,
                    sdt.location AS target_loc,
                    sdt.name AS target_gene_symbol,
                    sdt.ensembl_id AS target_ensembl_id,
                    sedfi.ref_genome AS ref_genome,
                    array_remove(ARRAY_AGG(DISTINCT(srfv.facetvalue_id)) || ARRAY_AGG(DISTINCT(sdsfv.facetvalue_id)) || ARRAY_AGG(DISTINCT(sdtfv.facetvalue_id)), NULL) AS cat_facets
                FROM search_regulatoryeffectobservation AS sr
                LEFT JOIN search_regulatoryeffectobservation_facet_values as srfv on sr.id = srfv.regulatoryeffectobservation_id
                LEFT JOIN search_regulatoryeffectobservation_sources AS srs ON sr.id = srs.regulatoryeffectobservation_id
                LEFT JOIN search_regulatoryeffectobservation_targets AS srt ON sr.id = srt.regulatoryeffectobservation_id
                LEFT JOIN search_dnafeature AS sds ON sds.id = srs.dnafeature_id
                LEFT JOIN search_dnafeature_facet_values as sdsfv on sds.id = sdsfv.dnafeature_id
                LEFT JOIN search_dnafeature AS sdt ON sdt.id = srt.dnafeature_id
                LEFT JOIN search_dnafeature_facet_values as sdtfv on sdt.id = sdtfv.dnafeature_id
                LEFT JOIN search_analysis AS sa ON sr.analysis_accession_id = sa.accession_id
                LEFT JOIN search_file AS sf ON sa.id = sf.analysis_id
                LEFT JOIN search_experimentdatafileinfo AS sedfi ON sf.data_file_info_id = sedfi.id
                WHERE sr.analysis_accession_id = %s AND srfv.facetvalue_id != (SELECT id FROM search_facetvalue where value = 'Non-significant')
                GROUP BY sr.id, sds.id, sdt.id, sedfi.ref_genome""",
                [analysis.accession_id],
            )


def unloadload_analyses(apps, schema_editor):
    """Do nothing. The tables will be dropped when unmigrating so we don't need to delete the rows."""


class Migration(migrations.Migration):

    dependencies = [
        ("get_expr_data", "0018_auto_20231114_1447"),
    ]

    operations = [
        migrations.CreateModel(
            name="ReoSourcesTargetsSigOnly",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("reo_id", models.BigIntegerField()),
                ("archived", models.BooleanField(default=False)),
                ("public", models.BooleanField(default=True)),
                (
                    "reo_accession",
                    models.CharField(
                        max_length=17, validators=[cegs_portal.search.models.validators.validate_accession_id]
                    ),
                ),
                (
                    "reo_experiment",
                    models.CharField(
                        max_length=17, validators=[cegs_portal.search.models.validators.validate_accession_id]
                    ),
                ),
                (
                    "reo_analysis",
                    models.CharField(
                        max_length=17, validators=[cegs_portal.search.models.validators.validate_accession_id]
                    ),
                ),
                ("reo_facets", models.JSONField(blank=True, null=True)),
                ("source_id", models.BigIntegerField()),
                (
                    "source_accession",
                    models.CharField(
                        max_length=17, validators=[cegs_portal.search.models.validators.validate_accession_id]
                    ),
                ),
                ("source_chrom", models.CharField(max_length=10)),
                ("source_loc", django.contrib.postgres.fields.ranges.IntegerRangeField()),
                ("target_id", models.BigIntegerField(blank=True, null=True)),
                (
                    "target_accession",
                    models.CharField(
                        blank=True,
                        max_length=17,
                        null=True,
                        validators=[cegs_portal.search.models.validators.validate_accession_id],
                    ),
                ),
                ("target_chrom", models.CharField(blank=True, max_length=10, null=True)),
                ("target_loc", django.contrib.postgres.fields.ranges.IntegerRangeField(blank=True, null=True)),
                ("target_gene_symbol", models.CharField(blank=True, max_length=50, null=True)),
                ("target_ensembl_id", models.CharField(blank=True, max_length=50, null=True)),
                ("ref_genome", models.CharField(max_length=20)),
                (
                    "cat_facets",
                    django.contrib.postgres.fields.ArrayField(base_field=models.BigIntegerField(), size=None),
                ),
            ],
            options={
                "db_table": "get_expr_data_reo_sources_targets_sig_only",
                "indexes": [
                    models.Index(fields=["reo_accession"], name="idx_rstsom_reo_accession"),
                    django.contrib.postgres.indexes.GistIndex(fields=["source_loc"], name="idx_rstsom_source_loc"),
                    django.contrib.postgres.indexes.GistIndex(fields=["target_loc"], name="idx_rstsom_target_loc"),
                    django.contrib.postgres.indexes.GinIndex(fields=["cat_facets"], name="idx_rstsom_cat_facet"),
                    models.Index(
                        django.db.models.expressions.RawSQL("((reo_facets->>'Raw p value')::numeric)", []),
                        name="idx_rstsom_pval_asc",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ReoSourcesTargets",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("reo_id", models.BigIntegerField()),
                ("archived", models.BooleanField(default=False)),
                ("public", models.BooleanField(default=True)),
                (
                    "reo_accession",
                    models.CharField(
                        max_length=17, validators=[cegs_portal.search.models.validators.validate_accession_id]
                    ),
                ),
                (
                    "reo_experiment",
                    models.CharField(
                        max_length=17, validators=[cegs_portal.search.models.validators.validate_accession_id]
                    ),
                ),
                (
                    "reo_analysis",
                    models.CharField(
                        max_length=17, validators=[cegs_portal.search.models.validators.validate_accession_id]
                    ),
                ),
                ("reo_facets", models.JSONField(blank=True, null=True)),
                ("source_id", models.BigIntegerField()),
                (
                    "source_accession",
                    models.CharField(
                        max_length=17, validators=[cegs_portal.search.models.validators.validate_accession_id]
                    ),
                ),
                ("source_chrom", models.CharField(max_length=10)),
                ("source_loc", django.contrib.postgres.fields.ranges.IntegerRangeField()),
                ("target_id", models.BigIntegerField(blank=True, null=True)),
                (
                    "target_accession",
                    models.CharField(
                        blank=True,
                        max_length=17,
                        null=True,
                        validators=[cegs_portal.search.models.validators.validate_accession_id],
                    ),
                ),
                ("target_chrom", models.CharField(blank=True, max_length=10, null=True)),
                ("target_loc", django.contrib.postgres.fields.ranges.IntegerRangeField(blank=True, null=True)),
                ("target_gene_symbol", models.CharField(blank=True, max_length=50, null=True)),
                ("target_ensembl_id", models.CharField(blank=True, max_length=50, null=True)),
                ("ref_genome", models.CharField(max_length=20)),
                (
                    "cat_facets",
                    django.contrib.postgres.fields.ArrayField(base_field=models.BigIntegerField(), size=None),
                ),
            ],
            options={
                "db_table": "get_expr_data_reo_sources_targets",
                "indexes": [
                    models.Index(fields=["reo_accession"], name="idx_rstm_reo_accession"),
                    django.contrib.postgres.indexes.GistIndex(fields=["source_loc"], name="idx_rstm_source_loc"),
                    django.contrib.postgres.indexes.GistIndex(fields=["target_loc"], name="idx_rstm_target_loc"),
                    django.contrib.postgres.indexes.GinIndex(fields=["cat_facets"], name="idx_rstm_cat_facet"),
                    models.Index(
                        django.db.models.expressions.RawSQL("((reo_facets->>'Raw p value')::numeric)", []),
                        name="idx_rstm_pval_asc",
                    ),
                ],
            },
        ),
        migrations.RunPython(load_analyses, unloadload_analyses),
        migrations.RunSQL(
            "DROP MATERIALIZED VIEW IF EXISTS reo_sources_targets_sig_only", REO_SOURCES_TARGETS_SIG_ONLY
        ),
        migrations.RunSQL("DROP MATERIALIZED VIEW IF EXISTS reo_sources_targets", REO_SOURCES_TARGETS),
    ]
