# Generated by Django 3.2.6 on 2021-09-22 17:41

import cegs_portal.search.models.validators
import django.contrib.postgres.fields
import django.contrib.postgres.fields.ranges
import django.contrib.postgres.indexes
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DNaseIHypersensitiveSite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cell_line', models.CharField(max_length=50)),
                ('chromosome_name', models.CharField(max_length=10)),
                ('closest_gene_distance', models.IntegerField()),
                ('closest_gene_name', models.CharField(max_length=50)),
                ('location', django.contrib.postgres.fields.ranges.IntegerRangeField()),
                ('ref_genome', models.CharField(max_length=20)),
                ('ref_genome_patch', models.CharField(max_length=10, null=True)),
                ('strand', models.CharField(default=None, max_length=1, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Exon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ensembl_id', models.CharField(default='No ID', max_length=50)),
                ('number', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Experiment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
            ],
        ),
        migrations.CreateModel(
            name='GencodeGFF3Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chrom_name', models.CharField(max_length=10)),
                ('base_range', django.contrib.postgres.fields.ranges.IntegerRangeField()),
            ],
        ),
        migrations.CreateModel(
            name='Gene',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ensembl_id', models.CharField(default='No ID', max_length=50, unique=True)),
                ('gene_type', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Transcript',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ensembl_id', models.CharField(default='No ID', max_length=50, unique=True)),
                ('transcript_type', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Variant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chromosome_name', models.CharField(max_length=10)),
                ('assembly', models.CharField(max_length=20)),
                ('location', django.contrib.postgres.fields.ranges.IntegerRangeField()),
                ('variant_id', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=30), size=None)),
                ('reference_base', models.CharField(max_length=100)),
                ('alternative_bases', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=30), null=True, size=None)),
                ('kind', models.CharField(choices=[('SNP', 'depleted'), ('enriched', 'enriched'), ('both', 'both'), ('non_sig', 'non_sig')], default='SNP', max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='VariantLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assembly', models.CharField(max_length=20)),
                ('chromosome_name', models.CharField(max_length=10)),
                ('location', django.contrib.postgres.fields.ranges.IntegerRangeField()),
            ],
        ),
        migrations.CreateModel(
            name='VCFFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('header', models.JSONField(default=dict)),
                ('sample_names', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=30), default=list, size=None)),
                ('deleted', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='VCFEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quality', models.FloatField(null=True)),
                ('filters', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=30), default=list, null=True, size=None)),
                ('info', models.CharField(max_length=50, null=True)),
                ('sample_format', models.CharField(max_length=50, null=True)),
                ('sample_data', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=50), default=list, null=True, size=None)),
                ('genotypes', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=10), default=list, null=True, size=None)),
                ('heterozygosities', django.contrib.postgres.fields.ArrayField(base_field=models.BooleanField(default=True), default=list, null=True, size=None)),
                ('phased', django.contrib.postgres.fields.ArrayField(base_field=models.BooleanField(default=True), default=list, null=True, size=None)),
                ('allele_frequency', models.FloatField()),
                ('read_depth', models.IntegerField()),
                ('mappability', models.FloatField()),
                ('deleted', models.BooleanField(default=False)),
                ('file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='search.vcffile')),
                ('variant', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='entries', to='search.variant')),
            ],
        ),
        migrations.AddField(
            model_name='variant',
            name='all_locations',
            field=models.ManyToManyField(to='search.VariantLocation'),
        ),
        migrations.CreateModel(
            name='TranscriptAssembly',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chrom_name', models.CharField(max_length=10)),
                ('ids', models.JSONField(null=True, validators=[cegs_portal.search.models.validators.validate_gene_ids])),
                ('location', django.contrib.postgres.fields.ranges.IntegerRangeField()),
                ('name', models.CharField(max_length=80)),
                ('strand', models.CharField(max_length=1, null=True)),
                ('ref_genome', models.CharField(max_length=20)),
                ('ref_genome_patch', models.CharField(max_length=10)),
                ('transcript', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='search.transcript')),
            ],
        ),
        migrations.AddField(
            model_name='transcript',
            name='assemblies',
            field=models.ManyToManyField(related_name='transcript_set', to='search.TranscriptAssembly'),
        ),
        migrations.AddField(
            model_name='transcript',
            name='gene',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='search.gene'),
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('subject_id', models.CharField(max_length=512, primary_key=True, serialize=False)),
                ('source', models.CharField(max_length=512)),
                ('files', models.ManyToManyField(to='search.VCFFile')),
            ],
        ),
        migrations.CreateModel(
            name='RegulatoryEffect',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('direction', models.CharField(choices=[('depleted', 'depleted'), ('enriched', 'enriched'), ('both', 'both'), ('non_sig', 'non_sig')], default='non_sig', max_length=8)),
                ('score', models.FloatField(null=True)),
                ('significance', models.FloatField(null=True)),
                ('experiment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='search.experiment')),
                ('sources', models.ManyToManyField(related_name='regulatory_effects', to='search.DNaseIHypersensitiveSite')),
                ('targets', models.ManyToManyField(related_name='regulatory_effects', to='search.Gene')),
            ],
        ),
        migrations.CreateModel(
            name='GeneAssembly',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chrom_name', models.CharField(max_length=10)),
                ('ids', models.JSONField(null=True, validators=[cegs_portal.search.models.validators.validate_gene_ids])),
                ('location', django.contrib.postgres.fields.ranges.IntegerRangeField()),
                ('name', models.CharField(max_length=50)),
                ('strand', models.CharField(max_length=1, null=True)),
                ('ref_genome', models.CharField(max_length=20)),
                ('ref_genome_patch', models.CharField(max_length=10)),
                ('gene', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='search.gene')),
            ],
        ),
        migrations.AddField(
            model_name='gene',
            name='assemblies',
            field=models.ManyToManyField(related_name='gene_set', to='search.GeneAssembly'),
        ),
        migrations.CreateModel(
            name='GencodeGFF3Annotation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chrom_name', models.CharField(max_length=10)),
                ('location', django.contrib.postgres.fields.ranges.IntegerRangeField()),
                ('strand', models.CharField(max_length=1)),
                ('score', models.FloatField(null=True)),
                ('phase', models.IntegerField(null=True)),
                ('annotation_type', models.CharField(max_length=100)),
                ('id_attr', models.CharField(max_length=50)),
                ('ref_genome', models.CharField(max_length=20)),
                ('ref_genome_patch', models.CharField(max_length=10)),
                ('gene_name', models.CharField(max_length=50)),
                ('gene_type', models.CharField(max_length=50)),
                ('level', models.IntegerField()),
                ('attributes', models.JSONField(null=True)),
                ('exon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='annotation', to='search.exon')),
                ('gene', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='annotation', to='search.gene')),
                ('region', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='search.gencodegff3region')),
                ('transcript', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='annotation', to='search.transcript')),
            ],
        ),
        migrations.CreateModel(
            name='ExonAssembly',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chrom_name', models.CharField(max_length=10)),
                ('ids', models.JSONField(null=True, validators=[cegs_portal.search.models.validators.validate_gene_ids])),
                ('location', django.contrib.postgres.fields.ranges.IntegerRangeField()),
                ('strand', models.CharField(max_length=1, null=True)),
                ('ref_genome', models.CharField(max_length=20)),
                ('ref_genome_patch', models.CharField(max_length=10)),
                ('exon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='search.exon')),
            ],
        ),
        migrations.AddField(
            model_name='exon',
            name='assemblies',
            field=models.ManyToManyField(related_name='exon_set', to='search.ExonAssembly'),
        ),
        migrations.AddField(
            model_name='exon',
            name='gene',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='search.gene'),
        ),
        migrations.AddField(
            model_name='exon',
            name='transcript',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='search.transcript'),
        ),
        migrations.AddField(
            model_name='dnaseihypersensitivesite',
            name='closest_gene',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='search.gene'),
        ),
        migrations.AddIndex(
            model_name='variant',
            index=django.contrib.postgres.indexes.GistIndex(fields=['location'], name='search_variant_location_index'),
        ),
        migrations.AddIndex(
            model_name='transcript',
            index=models.Index(fields=['ensembl_id'], name='search_tx_ensembl_id_index'),
        ),
        migrations.AddIndex(
            model_name='geneassembly',
            index=models.Index(fields=['name'], name='search_geneassembly_name_index'),
        ),
        migrations.AddIndex(
            model_name='geneassembly',
            index=django.contrib.postgres.indexes.GistIndex(fields=['location'], name='search_geneassembly_loc_index'),
        ),
        migrations.AddIndex(
            model_name='gene',
            index=models.Index(fields=['ensembl_id'], name='search_gene_ensembl_id_index'),
        ),
        migrations.AddIndex(
            model_name='gencodegff3annotation',
            index=django.contrib.postgres.indexes.GistIndex(fields=['location'], name='search_gcanno_location_index'),
        ),
        migrations.AddIndex(
            model_name='exon',
            index=models.Index(fields=['ensembl_id'], name='search_exon_ensembl_id_index'),
        ),
        migrations.AddIndex(
            model_name='dnaseihypersensitivesite',
            index=django.contrib.postgres.indexes.GistIndex(fields=['location'], name='search_dhs_location_index'),
        ),
    ]
