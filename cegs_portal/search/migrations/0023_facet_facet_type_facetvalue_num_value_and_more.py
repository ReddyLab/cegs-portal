# Generated by Django 4.0.1 on 2022-03-04 16:05

from django.db import migrations, models, transaction
from cegs_portal.search.models import EffectDirectionType, Facet, FacetType, FacetValue, RegulatoryEffect

def add_facets(_apps, _schema_editor):
    direction_facet = Facet(facet_type=FacetType.DISCRETE, name="Direction", description="Effect change direction")
    Facet.objects.bulk_create([
        direction_facet,
        Facet(facet_type=FacetType.CONTINUOUS, name="Effect Size", description="log2 fold changes"),
        Facet(facet_type=FacetType.CONTINUOUS, name="Significance", description="An adjusted p value"),
        Facet(facet_type=FacetType.CONTINUOUS, name="Raw p value", description="p value, scaled with -log10")
    ])
    FacetValue.objects.bulk_create([
        FacetValue(facet=direction_facet, value=EffectDirectionType.DEPLETED.value),
        FacetValue(facet=direction_facet, value=EffectDirectionType.ENRICHED.value),
        FacetValue(facet=direction_facet, value=EffectDirectionType.BOTH.value),
        FacetValue(facet=direction_facet, value=EffectDirectionType.NON_SIGNIFICANT.value)
    ])

def remove_facets(_apps, _schema_editor):
    with transaction.atomic():
        try:
            Facet.objects.get(name="Direction").delete()
        except Facet.DoesNotExist as e:
            print(e)

        try:
            Facet.objects.get(name="Effect Size").delete()
        except Facet.DoesNotExist as e:
            print(e)

        try:
            Facet.objects.get(name="Significance").delete()
        except Facet.DoesNotExist as e:
            print(e)

        try:
            Facet.objects.get(name="Raw p value").delete()
        except Facet.DoesNotExist as e:
            print(e)

        try:
            FacetValue.objects.get(value=EffectDirectionType.DEPLETED.value).delete()
        except FacetValue.DoesNotExist as e:
            print(e)

        try:
            FacetValue.objects.get(value=EffectDirectionType.ENRICHED.value).delete()
        except FacetValue.DoesNotExist as e:
            print(e)

        try:
            FacetValue.objects.get(value=EffectDirectionType.BOTH.value).delete()
        except FacetValue.DoesNotExist as e:
            print(e)

        try:
            FacetValue.objects.get(value=EffectDirectionType.NON_SIGNIFICANT.value).delete()
        except FacetValue.DoesNotExist as e:
            print(e)

def migrate_facet_values(_apps, _schema_editor):
    effect_size = Facet.objects.get(name="Effect Size")
    sig = Facet.objects.get(name="Significance")
    raw_p = Facet.objects.get(name="Raw p value")
    dep = FacetValue.objects.get(value=EffectDirectionType.DEPLETED.value)
    dep.save()
    en = FacetValue.objects.get(value=EffectDirectionType.ENRICHED.value)
    en.save()
    both = FacetValue.objects.get(value=EffectDirectionType.BOTH.value)
    both.save()
    non = FacetValue.objects.get(value=EffectDirectionType.NON_SIGNIFICANT.value)
    non.save()

    directions = {
        EffectDirectionType.DEPLETED.value: dep,
        EffectDirectionType.ENRICHED.value: en,
        EffectDirectionType.BOTH.value: both,
        EffectDirectionType.NON_SIGNIFICANT.value: non,
    }

    for reg_effect in RegulatoryEffect.objects.all():
        with transaction.atomic():
            values = FacetValue.objects.bulk_create([
                FacetValue(facet=effect_size, num_value=reg_effect.effect_size),
                FacetValue(facet=sig, num_value=reg_effect.significance),
                FacetValue(facet=raw_p, num_value=reg_effect.raw_p_value),
            ])
            values.append(directions[reg_effect.direction])
            reg_effect.facet_values.set(values)

def delete_facet_values(_apps, _schema_editor):
    for reg_effect in RegulatoryEffect.objects.prefetch_related("facet_values").all():
        reg_effect.facet_values.clear()

class Migration(migrations.Migration):
    atomic = False

    dependencies = [
        ('search', '0022_dnaregion_dnaregion_srchbl_idx_and_more'),
    ]

    operations = [
        migrations.AddField(
            model_name='facet',
            name='facet_type',
            field=models.CharField(choices=[(FacetType['DISCRETE'], FacetType['DISCRETE'].value), (FacetType['CONTINUOUS'], FacetType['CONTINUOUS'].value)], default=FacetType['CONTINUOUS'], max_length=30),
        ),
        migrations.AddField(
            model_name='facetvalue',
            name='num_value',
            field=models.FloatField(null=True),
        ),
        migrations.AlterField(
            model_name='facetvalue',
            name='value',
            field=models.CharField(max_length=30, null=True),
        ),
        migrations.RunPython(add_facets, reverse_code=remove_facets),
        migrations.RunPython(migrate_facet_values, reverse_code=delete_facet_values),
    ]
