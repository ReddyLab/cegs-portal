# Generated by Django 5.1.4 on 2025-02-10 18:39
import logging

from django.db import migrations, models

from cegs_portal.search.migrations.utils.facets import get_or_create_facet, get_or_create_facet_value
from cegs_portal.search.models import Experiment, Facet, FacetValue

logger = logging.getLogger(__name__)


def add_unknown_cell_line(apps, schema_editor):
    source_facet = Facet.objects.get(name="Cell Line")
    ge = FacetValue(value="Unknown", facet=source_facet)
    ge.save()


def remove_unknown_cell_line(apps, schema_editor):
    try:
        ge = FacetValue.objects.get(value="Unknown")
        ge.delete()
    except:
        pass


def add_genomic_element(apps, schema_editor):
    source_facet = Facet.objects.get(name="Experiment Source Type")
    ge = FacetValue(value="Genomic Element", facet=source_facet)
    ge.save()


def remove_genomic_element(apps, schema_editor):
    try:
        ge = FacetValue.objects.get(value="Genomic Element")
        ge.delete()
    except:
        pass


def create_provenance(apps, schema_editor):
    provenance = get_or_create_facet(
        Facet, "Provenance", "Institution/Consortium experiment was performed under", "FacetType.CATEGORICAL"
    )

    try:
        Provenance = getattr(Experiment, "Provenance")
    except AttributeError:
        return

    provenances = [
        Provenance.CCGR,
        Provenance.IGVF,
    ]

    for value in provenances:
        try:
            get_or_create_facet_value(FacetValue, value, provenance)
        except:
            pass

    ccgr = FacetValue.objects.get(value=Provenance.CCGR)
    for experiment in Experiment.objects.all():
        experiment.facet_values.add(ccgr)


def revert_provenance(apps, schema_editor):
    try:
        Provenance = getattr(Experiment, "Provenance")
    except AttributeError:
        return

    ccgr = FacetValue.objects.get(value=Provenance.CCGR)
    for experiment in Experiment.objects.all():
        experiment.facet_values.remove(ccgr)

    try:
        provenance = Facet.objects.get(name="Provenance")
        for facet_value in provenance.values.all():
            facet_value.delete()
        provenance.delete()
    except Facet.DoesNotExist:
        pass


class Migration(migrations.Migration):

    dependencies = [
        ("search", "0073_alter_dnafeature_feature_type_and_more"),
    ]

    operations = [
        migrations.AlterField(
            model_name="accessionidlog",
            name="accession_type",
            field=models.CharField(
                choices=[
                    ("AccessionType.GENE", "gene"),
                    ("AccessionType.TRANSCRIPT", "transcript"),
                    ("AccessionType.EXON", "exon"),
                    ("AccessionType.REGULATORY_EFFECT_OBS", "regulatory effect observation"),
                    ("AccessionType.GRNA", "grna"),
                    ("AccessionType.CCRE", "ccre"),
                    ("AccessionType.DHS", "dhs"),
                    ("AccessionType.EXPERIMENT", "experiment"),
                    ("AccessionType.CAR", "chromatin accessible region"),
                    ("AccessionType.TT", "tissue type"),
                    ("AccessionType.CL", "cell line"),
                    ("AccessionType.BIOS", "biosample"),
                    ("AccessionType.ANALYSIS", "analysis"),
                    ("AccessionType.GE", "genomic element"),
                    ("AccessionType.IGVF", "igvf experiment"),
                ],
                max_length=100,
            ),
        ),
        migrations.RunPython(create_provenance, revert_provenance),
        migrations.RunPython(add_genomic_element, remove_genomic_element),
        migrations.RunPython(add_unknown_cell_line, remove_unknown_cell_line),
    ]
