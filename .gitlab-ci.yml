stages:
  - lint
  - build
  - test
  - scan
  - deleteimage
  - updatechart


include:
  - project: 'utility/project-templates/ci-templates'
    file: '/docker-ci.yml'

flake8:
  stage: lint
  tags:
    - kube-executor
  image: python:3.11.4-bookworm
  before_script:
    - pip install -q flake8 --no-warn-script-location
  script:
    - /var/tmp/.local/bin/flake8

build-test:
  extends: .kaniko_build
  variables:
    THE_DOCKERFILE: ${TEST_DOCKERFILE}
  only:
    - main

build-qa:
  extends: .kaniko_build
  variables:
    THE_DOCKERFILE: ${TEST_DOCKERFILE}
    THE_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}
  except:
    - main
    - production

build-prod:
  extends: .kaniko_build
  variables:
    THE_DOCKERFILE: ${PROD_DOCKERFILE}
    THE_IMAGE: ${CI_REGISTRY_IMAGE}:prod
  only:
    - production

.pytest: &pytest
  stage: test
  tags:
    - kube-executor
  image: ${CI_REGISTRY_IMAGE}:dev
  variables:
    GIT_STRATEGY: none
    POSTGRES_HOST: postgres
    POSTGRES_PORT: "5432"
    POSTGRES_DB: cegs_portal
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: test_password
    DATABASE_USER: ${POSTGRES_USER}
    DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
    DATABASE_HOST: ${POSTGRES_HOST}
    DATABASE_URL: "postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"
    USE_DOCKER: "no"
    DJANGO_SETTINGS_MODULE: "config.settings.test"
  services:
    - name: "image-mirror-prod-registry.cloud.duke.edu/bitnami/postgresql:13-debian-10"
      alias: postgres
  before_script:
    - cd /app
    - python manage.py collectstatic -i "*.ecd" -i "*.fd"
  script:
    - pytest --create-db
  retry:
    max: 2
    when: runner_system_failure

pytest-test:
  extends: .pytest
  only:
    - main

pytest-qa:
  extends: .pytest
  image: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}
  except:
    - production
    - main

scan-test:
  extends: .docker_scan
  only:
    - main

scan-qa:
  extends: .docker_scan
  variables:
    THE_IMAGE: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}
  except:
    - main
    - production

scan-prod:
  extends: .docker_scan
  variables:
    THE_IMAGE: ${CI_REGISTRY_IMAGE}:prod
  only:
    - production

deleteimage-qa:
  image: ${CI_REGISTRY}/utility/images/basic-shell-executor:latest
  stage: deleteimage
  script:
    - set -euo pipefail
    - TAG=${CI_COMMIT_REF_SLUG}
    - CONTENT_TYPE="application/json"
    - 'curl -sfv -X DELETE -H "Private-Token: ${DELETE_CONTAINER_TAG}" -H "Accept: ${CONTENT_TYPE}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/registry/repositories/2148/tags/${TAG}"'
  tags:
    - kube-executor
  retry:
    max: 2
    when: runner_system_failure
  except:
    - production
    - main

.updatechart:
  retry: 1
  image: ${CI_REGISTRY}/utility/images/basic-shell-executor:latest
  stage: updatechart
  script:
    - set -euo pipefail
    - TAG=${TAG:-dev}
    - CONTENT_TYPE="application/json"
    # Get the SHA hash of the newly created image
    - 'SHA=$(curl -sf -H "Private-Token: ${SELF_API_TOKEN}" -H "Accept: ${CONTENT_TYPE}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/registry/repositories/2148/tags/$TAG" | jq ".digest")'
    - echo ${SHA}
    # Update the IMAGE_SHA variable in cegs-portal-charts with the SHA hash of the new image
    - 'curl -svf -X PUT -H "Private-Token: ${CHART_API_TOKEN}" "${CI_API_V4_URL}/projects/4782/variables/${IMAGE_SHA}" -F "value=${SHA}"'
    # Trigger the CD pipeline in cegs-portal-charts
    - 'curl -svf -X POST -H "Private-Token: ${CHART_API_TOKEN}" -F token=${DEPLOY_TRIGGER_TOKEN} -F ref=${TRIGGER_BRANCH} "${CI_API_V4_URL}/projects/4782/trigger/pipeline"'
  tags:
    - kube-executor

updatechart-test:
  extends: .updatechart
  variables:
    IMAGE_SHA: QA_IMAGE_SHA
    TRIGGER_BRANCH: master
  only:
    - main

updatechart-prod:
  extends: .updatechart
  variables:
    IMAGE_SHA: PROD_IMAGE_SHA
    TAG: prod
    TRIGGER_BRANCH: production
  only:
    - production

