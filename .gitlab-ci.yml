stages:
  - lint
  - test
  - build
  - scan
  - updatechart

variables:
  THE_DOCKERFILE: ./compose/production/django/Dockerfile

include:
  - project: 'utility/project-templates/ci-templates'
    file: '/docker2.yml'

flake8:
  stage: lint
  tags:
    - docker-executor
  image: python:3.9-alpine
  before_script:
    - pip install -q flake8
  script:
    - flake8

pytest:
  stage: test
  image: docker/compose:latest
  tags:
    - shell-executor
  before_script:
    - docker ps -a
    # - docker stop 496441e913aa
    # - docker rm 496441e913aa
    # - docker stop 5ad5df8a15bb
    # - docker rm 5ad5df8a15bb
    # - docker ps -a
    - docker volume ls
    # - docker volume rm cegs-portal_local_postgres_data_backups
    # - docker volume rm cegs-portal_local_postgres_data
    - docker-compose -f local.yml build
    # Ensure celerybeat does not crash due to non-existent tables
    - docker-compose -f local.yml up -d
    - docker-compose -f local.yml run --rm django python manage.py migrate
    - docker-compose -f local.yml run django python manage.py collectstatic
  script:
    - docker-compose -f local.yml run django pytest

build-test:
  extends: .kaniko_build
  except:
    - production

build-prod:
  extends: .kaniko_build
  variables:
    THE_IMAGE: $CI_REGISTRY_IMAGE:prod
  only:
    - production

scan-test:
  extends: .docker_scan
  except:
    - production

scan-prod:
  extends: .docker_scan
  variables:
    THE_IMAGE: $CI_REGISTRY_IMAGE:prod
  only:
    - production

.updatechart:
  retry: 1
  image: $CI_REGISTRY/utility/images/basic-shell-executor:latest
  stage: updatechart
  script:
    - TAG=${TAG:-dev}
    - REGISTRY_ENDPOINT="https://gitlab.dhe.duke.edu"
    - CONTENT_TYPE="application/json"
    - SHA=$(curl -sf -H "Private-Token:$SELF_API_TOKEN" -H "accept:$CONTENT_TYPE" "$REGISTRY_ENDPOINT/api/v4/projects/4707/registry/repositories/1732/tags/$TAG" | jq ".digest")
    - curl -sf -X PUT -H "Private-Token:$CHART_API_TOKEN" "$REGISTRY_ENDPOINT/api/v4/projects/4782/variables/$IMAGE_SHA" -F "value=$SHA"
    - curl -sf -X POST -H "Private-Token:$CHART_API_TOKEN" -F token=$DEPLOY_TRIGGER_TOKEN -F ref=$TRIGGER_BRANCH $REGISTRY_ENDPOINT/api/v4/projects/4782/trigger/pipeline
  tags:
    - kube-executor

updatechart-test:
  extends: .updatechart
  variables:
    IMAGE_SHA: DEV_IMAGE_SHA
    TRIGGER_BRANCH: master
  except:
    - production

updatechart-prod:
  extends: .updatechart
  variables:
    IMAGE_SHA: PROD_IMAGE_SHA
    TAG: prod
    TRIGGER_BRANCH: production
  only:
    - production

